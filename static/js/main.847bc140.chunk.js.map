{"version":3,"sources":["components/SearchBox.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","handleChange","event","value","target","_this","props","react_default","a","createElement","className","this","onChange","bind","type","placeholder","Component","List","key","children","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","val","console","log","state","search","setState","_this2","listToDisplay","filter","country","toLowerCase","indexOf","components_SearchBox","map","components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAiBeA,0NAbbC,aAAe,SAAAC,GAChB,IAAMC,EAAQD,EAAME,OAAOD,MAC3BE,EAAKC,MAAML,aAAaE,4EAGrB,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACdH,EAAAC,EAAAC,cAAA,SAAON,MAAOQ,KAAKL,MAAMH,MAAOS,SAAUD,KAAKV,aAAaY,KAAKF,MAAOG,KAAK,SAASJ,UAAU,GAAGK,YAAY,mBAR9FC,cCUTC,0LARX,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACnBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkBQ,IAAKP,KAAKL,MAAMa,UAAWR,KAAKL,MAAMa,kBAJrDH,cCmDJI,cAjDd,SAAAA,EAAYd,GAAM,IAAAD,EAAA,OAAAgB,OAAAC,EAAA,EAAAD,CAAAV,KAAAS,IACjBf,EAAAgB,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAd,KAAML,KAKPL,aAAe,SAAAyB,GACdC,QAAQC,IAAIvB,EAAKwB,MAAMC,QACvBzB,EAAK0B,SAAS,CACbD,OAAQJ,KAPTrB,EAAKwB,MAAQ,CACZC,OAAQ,IAHQzB,wEAYR,IAAA2B,EAAArB,KAkBNsB,EAjBc,CACjB,QACA,0BACA,cACA,YACA,QACA,QACA,SACA,SACA,SACA,QACA,UACA,SACA,UACA,YAG4BC,OAC5B,SAACC,GACA,OAA6D,IAAtDA,EAAQC,cAAcC,QAAQL,EAAKH,MAAMC,UAI/C,OACEvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAC6B,EAAD,CAAWrC,aAAcU,KAAKV,aAAcE,MAAOQ,KAAKkB,MAAMC,SAC9DvB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZuB,EAAcM,IAAI,SAACJ,GACzB,OAAO5B,EAAAC,EAAAC,cAAC+B,EAAD,KAAOL,cA1CCnB,aCQEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.847bc140.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './search.css';\r\n\r\nclass SearchBox extends Component {\r\n  handleChange = event => {\r\n\tconst value = event.target.value;\r\n\tthis.props.handleChange(value)\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"search input-group\">\r\n       <input value={this.props.value} onChange={this.handleChange.bind(this)} type=\"search\" className=\"\" placeholder=\"Search\"/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\nimport './list.css';\r\n\r\nclass List extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"list\">\r\n\t\t<li className=\"list-group-item\" key={this.props.children}>{this.props.children}</li>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBox from './components/SearchBox.js';\nimport List from './components/List.js';\nclass App extends Component {\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tsearch: ''\n\t\t}\n\t};\n\thandleChange = val =>{\n\t\tconsole.log(this.state.search)\n\t\tthis.setState({\n\t\t\tsearch: val\n\t\t});\n\t}\n  render() {\n  \t\tlet fullList = [\n\t\t'India',\n\t\t'United State of America',\n\t\t'New Zealand',\n\t\t'Sri Lanka',\n\t\t'Dubai',\n\t\t'China',\n\t\t'Brazil',\n\t\t'Canada',\n\t\t'Mexico',\n\t\t'Spain',\n\t\t'England',\n\t\t'France',\n\t\t'Germany',\n\t\t'Portugal'\n\t];\n\t\n\tlet listToDisplay = fullList.filter(\n\t\t(country) => {\n\t\t\treturn country.toLowerCase().indexOf(this.state.search) !== -1; \n\t\t}\n\t);\n\n    return (\n      <div className=\"App\">\n       <SearchBox handleChange={this.handleChange} value={this.state.search}></SearchBox>\n       <ul className=\"list-group\">\n       \t{listToDisplay.map((country) => {\n\t\t\treturn <List>{country}</List>\n       \t})}\n       </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}